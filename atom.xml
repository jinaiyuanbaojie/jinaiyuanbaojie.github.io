<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jinaiyuanbaojie.github.io/</id>
    <title>乱弹软件</title>
    <updated>2019-06-21T09:28:31.798Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jinaiyuanbaojie.github.io/"/>
    <link rel="self" href="https://jinaiyuanbaojie.github.io//atom.xml"/>
    <subtitle>小舟从此逝，江海寄余生！</subtitle>
    <logo>https://jinaiyuanbaojie.github.io//images/avatar.png</logo>
    <icon>https://jinaiyuanbaojie.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 乱弹软件</rights>
    <entry>
        <title type="html"><![CDATA[计算机基础总结]]></title>
        <id>https://jinaiyuanbaojie.github.io//post/ji-suan-ji-ji-chu-zong-jie</id>
        <link href="https://jinaiyuanbaojie.github.io//post/ji-suan-ji-ji-chu-zong-jie">
        </link>
        <updated>2019-06-21T08:18:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="free-talk-about-programming">Free talk about Programming</h1>
<p>meetting room 810</p>
<h2 id="什么是计算机">什么是计算机</h2>
<ul>
<li>计算==机器==
<ul>
<li>古人的结绳法</li>
<li>算盘
<ul>
<li>古代的码农</li>
<li>CPU人脑 磁盘账本 内存算盘不具有记忆功能</li>
<li>没有代码，无法做到自动化，人力驱动</li>
</ul>
</li>
</ul>
</li>
<li>现代计算机
<ul>
<li>冯诺伊曼体系结构的计算机
<ul>
<li>组成：CPU 存储 IO 总线</li>
<li>量子计算</li>
</ul>
</li>
<li>IBM大型机到现在的小型机
<ul>
<li>制作工艺的提升，体积变小运算速度变快</li>
<li>为什么是二进制
<ul>
<li>模拟电路数字电路</li>
<li>高底电平两种状态  一分钱～10块 五千万～一亿</li>
</ul>
</li>
<li>不一定非要是二进制
<ul>
<li>需要发现新材料</li>
</ul>
</li>
</ul>
</li>
<li>代码和电力驱动
<ul>
<li>本质上还是人脑驱动</li>
<li>人生产代码</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="编程的内功">编程的内功</h2>
<ul>
<li>操作系统
<ul>
<li>进程管理</li>
<li>内存管理</li>
<li>文件系统</li>
<li>IO/设备驱动</li>
<li>定时器/中断</li>
</ul>
</li>
<li>数据结构与算法
<ul>
<li>数据的组成方式和操作方式
<ul>
<li>链表，数组，堆，栈</li>
<li>散列表</li>
<li>树，搜索树，红黑树，B+树</li>
<li>图，路径搜索，广度遍历，深度遍历</li>
</ul>
</li>
<li>提升具体场景下的增删改查性能
<ul>
<li>堆，最大堆最小堆，最值在顶部，优先队列</li>
<li>栈，语法检查括号匹配</li>
<li>散列表，O(1)</li>
<li>红黑树， Linux内核进程调度算法</li>
<li>B+树，数据库索引，存储在磁盘</li>
<li>图：路由器，Cocoapods依赖</li>
</ul>
</li>
</ul>
</li>
<li>计算机组成原理
<ul>
<li>存储金字塔结构，经济角度，折衷设计</li>
<li>有效的原因：局部原理</li>
<li>volatile
<ul>
<li>防止指令重排</li>
<li>防止缓存变量</li>
</ul>
</li>
<li>SDWebImage/Glide</li>
</ul>
</li>
<li>计算机网络</li>
<li>编译原理</li>
<li><s>计算机体系结构</s></li>
</ul>
<h2 id="编程的维度">编程的维度</h2>
<ul>
<li>一维编程
<ul>
<li>烂代码生产者</li>
<li>面条逻辑，缺少设计感</li>
<li>打字员，嘛也不懂</li>
</ul>
</li>
<li>二维编程
<ul>
<li>可读性</li>
<li>可维护性</li>
<li>不知道计算机的基本原理</li>
</ul>
</li>
<li>三维编程
<ul>
<li>内功，多线程场景考虑，缓存的使用等等</li>
<li>大智若愚，懂得取舍，不浮夸</li>
<li></li>
</ul>
</li>
</ul>
<h2 id="进程">进程</h2>
<ul>
<li>copy on write</li>
</ul>
<blockquote>
<p>进程，厨师cpu菜谱程序，原材料外设，炒菜的动作就是进程。</p>
</blockquote>
<h2 id="内存">内存</h2>
<ul>
<li>虚拟内存
<ul>
<li>页面置换算法</li>
</ul>
</li>
<li>内存抖动</li>
<li>内存对齐</li>
</ul>
<h2 id="helloc是如何运行的">hello.c是如何运行的</h2>
<ul>
<li>编译
<ul>
<li>预处理，去除注释，宏替换</li>
<li>词法分割，token</li>
<li>抽象语法树生成</li>
<li>语法分析，语义分析</li>
<li>前端：编译成为中间产物</li>
<li>后端：编译成为目标平台的汇编代码</li>
<li>汇编器生成二进制代码
<ul>
<li>.so文件</li>
<li>iOS的胖安装包 bitcode</li>
<li>ABI稳定</li>
</ul>
</li>
</ul>
</li>
<li>链接
<ul>
<li>静态链接
<ul>
<li>查找缺失的符号</li>
<li>重定位</li>
<li>libffmpeg的例子</li>
</ul>
</li>
<li>动态链接
<ul>
<li>为什么要动态链接：省内存</li>
<li>启动的时候链接</li>
<li>第一次使用的时候链接</li>
<li>手动链接
<ul>
<li>dlopen()</li>
<li>dlsyml()</li>
<li>dlclose()</li>
</ul>
</li>
<li>System.load()</li>
</ul>
</li>
</ul>
</li>
<li>装载
<ul>
<li>ELF/PE/Mach-O/.dex</li>
<li>分析文件头
<ul>
<li>Magic-Number</li>
<li>元数据</li>
<li>.code .data .bss .rodata .debug .dynamic等等</li>
<li>SMT iOS debug模式上线/fishhook</li>
</ul>
</li>
<li>动态链接所需要的库，至少需要官方的运行时库
<ul>
<li>查找路径
<ul>
<li>*NIX系统下</li>
<li>手动指定/Xcode配置</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>执行：
<ul>
<li>main()数是入口</li>
<li>mian()最先执行？
<ul>
<li><strong>attribute(constructor)</strong></li>
<li>.init</li>
<li>.deinit</li>
<li>静态变量初始化</li>
</ul>
</li>
<li>mian()数只是被runtime封装了而已！</li>
</ul>
</li>
<li>运行时内存布局
<ul>
<li>内核空间/用户空间</li>
<li>代码段，数据段，堆，栈</li>
<li>函数调用示例子
<ul>
<li>寄存器：PC ESP EBP EAX</li>
<li>StackFrame</li>
<li>系统调用<code>printf</code>
<ul>
<li>软中断，硬中断</li>
<li>可变参数</li>
<li>内核陷入int 0x80，内核栈</li>
</ul>
</li>
<li>StackOverflow/栈攻击</li>
</ul>
</li>
<li>多线程切换
<ul>
<li>多线程必要性，IO密集</li>
<li>吞吐量</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="编程语言的选择">编程语言的选择</h2>
<ul>
<li>我们至少应该会什么？
<ul>
<li>C/<s>C++</s>： “高级汇编语言”，接近机器，更直观的感受
<ul>
<li>内存分配，管理</li>
<li>指针：引用类型，值类型就是玩具</li>
<li>编译相关</li>
<li>JVM，JNI，CoreFoundation, Kernel</li>
</ul>
</li>
<li>面向对象语言
<ul>
<li>Java: 脱离C++那些繁杂的特性，让开发者更关注设计和面向对象的思维方式</li>
<li>Swift/Kotlin：现代的语言，现代的特性，更加简洁</li>
</ul>
</li>
<li>动态语言：Js Python Ruby.</li>
<li><s>函数式语言</s>：</li>
</ul>
</li>
<li>交叉训练
<ul>
<li>“语言不重要论”纯扯淡
<ul>
<li>这些人只会一门语言</li>
<li>或者其它语言hello world</li>
</ul>
</li>
<li>不同的语言有不同的设计理念和代码风格
<ul>
<li>语言决定思考问题的模式</li>
<li>自然语言：汉语vs英语</li>
<li>RxJava vs RxJs; TypeScript的出现</li>
</ul>
</li>
</ul>
</li>
<li>作为使用者，大胆评判
<ul>
<li>工具的使用者不需要了解工具的原理</li>
<li>你的直观感受？</li>
<li>只需要吃菜，不需要做饭</li>
</ul>
</li>
</ul>
<h2 id="编程语言的进化">编程语言的进化</h2>
<ul>
<li>纸带打孔：Debug &amp; 重写</li>
<li>汇编：CPU指令集的映射，不具有可移植性</li>
<li>C语言</li>
<li>高级语言：面向对象，函数式</li>
<li>语言的设计目标：
<ul>
<li>跨平台</li>
<li>执行高效</li>
<li>省内存</li>
<li>易于学习</li>
<li>高级特性，可读性强</li>
</ul>
</li>
</ul>
<blockquote>
<p>语言也是营销，你会的不代表好，只是你恰巧会</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS CI构建问题：Jekins&CocoaPods]]></title>
        <id>https://jinaiyuanbaojie.github.io//post/ios-ci-gou-jian-wen-ti-jekinsandcocoapods</id>
        <link href="https://jinaiyuanbaojie.github.io//post/ios-ci-gou-jian-wen-ti-jekinsandcocoapods">
        </link>
        <updated>2019-06-07T16:40:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="问题">问题：</h2>
<p>今天配合搭建新工程的CI构建环境。
构建脚本执行到<code>xcodebuild clean</code>时，<code>jekins</code>卡住日志一直loading卡住。
构建脚本与之前工程的完全一致。
旧工程可以正常构建。</p>
<h2 id="原因">原因：</h2>
<p>新工程使用了<code>CocoaPods</code>管理第三方代码。</p>
<h2 id="解决方法">解决方法：</h2>
<p>构建脚本需要额外添加指令，打开一下工程：</p>
<blockquote>
<p>open <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>P</mi><mi>a</mi><mi>t</mi><mi>h</mi><mi mathvariant="normal">/</mi></mrow><annotation encoding="application/x-tex">projectPath/</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord">/</span></span></span></span>projectname.xcworkspace</p>
</blockquote>
<p>打开工程后，会自动生成一些额外cocoapods相关的文件，问题解决。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MyNSHipster]]></title>
        <id>https://jinaiyuanbaojie.github.io//post/mynshipster</id>
        <link href="https://jinaiyuanbaojie.github.io//post/mynshipster">
        </link>
        <updated>2018-09-27T16:34:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="any-anyobject-anyclass">Any AnyObject AnyClass</h1>
<blockquote>
<p>三者的含义，顾名思义</p>
</blockquote>
<ul>
<li>Any: 任何变量, struct enum function</li>
<li>AnyObject: 任何class的实例，与ObjC中的id等价</li>
<li>AnyClass：任何对象的类对象,MetaType元类型。与ObjC中[NSObject class]类似。UIView.self &lt;==&gt; [UIView class]<br>
<a href="http://swifter.tips/self-anyclass/">blog</a></li>
</ul>
<h1 id="nil-nil-null-nsnull">nil Nil NULL NSNull</h1>
<ul>
<li>nil 指向不存在对象的指针</li>
<li>Nil 指向不存在类的指针 Class clazz = Nil</li>
<li>NULL 兼容C</li>
<li>NSNull 对象，表示“空”</li>
</ul>
<blockquote>
<p><a href="https://nshipster.cn/nil/">nshipster</a></p>
</blockquote>
<h1 id="id-nsobject-idnsobject">id NSObject <code>id&lt;NSObject&gt;</code></h1>
<ul>
<li>id: 任何对象，Objc中NSObject并非所有类的父类，比如NSProxy</li>
<li>NSObject: 父类为NSObject的对象</li>
<li><code>id&lt;NSObject&gt;</code>: 任何实现了NSObject协议的类的对象</li>
</ul>
<blockquote>
<p>ObjC中既有名为NSObject的protocol也有名为NSObject的class</p>
</blockquote>
<h1 id="id-instancetype">id instancetype</h1>
<blockquote>
<p>(id) init vs (instancetype) init
instancetype返回当前类型，辅助编译器提供更多信息</p>
</blockquote>
<h1 id="lifecycle-of-uiviewcontroller">Lifecycle of UIViewController</h1>
<pre><code class="language-swift">initWithNibName:bundle:
loadView
viewDidLoad
viewWillAppear
loadViewIfNeeded
viewWillLayoutSubviews
viewDidLayoutSubviews
viewDidAppear
viewWillDisappear
viewDidDisappear
didReceiveMemoryWarning
dealloc
</code></pre>
<blockquote>
<p>initWithNibName:bundle: 初始化方法两个参数都可以为空，系统会安装某种规则自动查找<br>
[UIViewController init]方法也会调用initWithNibName:bundle:<br>
调用initWithNibName:bundle:, 就不能override  loadView方法，否则会nib会被覆盖，导致失效。</p>
</blockquote>
<h1 id="java调用爷爷类方法">Java调用爷爷类方法</h1>
<ul>
<li>super.super 不存在的</li>
</ul>
<blockquote>
<p><a href="https://stackoverflow.com/questions/586363/why-is-super-super-method-not-allowed-in-java">stackoverflow</a></p>
</blockquote>
<h1 id="c-调用爷爷类方法">C++ 调用爷爷类方法</h1>
<blockquote>
<p>Grandfather::method()</p>
</blockquote>
<h1 id="nib-xib">nib xib</h1>
<ul>
<li>xib是nib的进化版本 nib-&gt;nib2.0-&gt;nib3.0-&gt;xib</li>
<li>xib是xml的文本文件，nib是二进制文件</li>
<li>xib也会被编译器编译，会被编译成nib文件</li>
</ul>
<blockquote>
<p><a href="https://stackoverflow.com/questions/3726400/what-is-the-difference-between-nib-and-xib-interface-builder-file-formats">stackoverflow</a><br>
<a href="https://onevcat.com/2013/12/code-vs-xib-vs-storyboard/">xib vs storyboard vs code</a></p>
</blockquote>
<h1 id="objc-super-vs-self">ObjC super VS self</h1>
<p><code>[super method]</code>和<code>[self method]</code>对象的接受者都是<code>self</code>.
只是<code>super</code>告诉runtime从<code>self</code>的基类开始查找方法</p>
<h1 id="objc-20-内存布局">ObjC 2.0 内存布局</h1>
<ul>
<li>1.0 ABI不兼容</li>
<li>2.0 系统库添加字段不影响业务代码。ABI兼容</li>
<li>大部分blog讲解的都是1.0的内存布局</li>
</ul>
<p><a href="http://quotation.github.io/objc/2015/05/21/objc-runtime-ivar-access.html">blog</a></p>
<h1 id="objc-category为何不能添加属性">ObjC category为何不能添加属性</h1>
<p>此处<strong>属性</strong>应该是<strong>成员</strong>。<br>
@property = ivar + getter + setter</p>
<ul>
<li>property 可以添加，通过编译。没意义，因为只有getter和setter，没有ivar</li>
<li>ivar 不可以添加：原因对象在内存中的布局必须是固定大小的。否则运行时会出现问题：已经分配的对象与新分配的对象大小不一样，调用方法可能会导致crash</li>
</ul>
<p>solution: 添加关联对象<br>
<a href="http://quotation.github.io/objc/2015/05/21/objc-runtime-ivar-access.html">blog</a><br>
<a href="https://developer.apple.com/documentation/objectivec/objective-c_runtime">Apple</a></p>
<h1 id="苹果开源代码">苹果开源代码</h1>
<p>下载链接 http://opensource.apple.com/</p>
<ul>
<li>runtime</li>
<li>GCD</li>
<li>CoreFoundation</li>
<li>etc...</li>
</ul>
<h1 id="modulemodulemap">module.modulemap</h1>
<p>http://andelf.github.io/blog/2014/06/19/modules-for-swift/</p>
<h1 id="codable原理">Codable原理</h1>
<p><a href="https://techblog.toutiao.com/2017/07/05/session212/">blog</a></p>
<h1 id="assetscar">Assets.car</h1>
<blockquote>
<p>编译后的ipa安装包，内部含有此文件。此文件是<code>image.xcassets</code>下图片资源的集合。</p>
</blockquote>
<h1 id="mainbundle-subbundle">main.bundle &amp; sub.bundle</h1>
<blockquote>
<p>工程的所有资源文件：图片，文件，xib等等都会存放到手机的bundle路径下。<br>
根目录就是main.bundle, main.bundle下存在各种sub.bundle.例如AliSDK.bundle</p>
</blockquote>
<h1 id="tips">TIPS</h1>
<ul>
<li>.tt文件 生成代码的模版文件 T4(Text Template Transformation Toolkit)</li>
<li><code>OSAtomicCompareAndSwap32Barrier(_oldValue _newValue _theValue)-&gt;Bool</code> 如果_oldValue == _theValue，那么设置_newValue并返回true。保证操作的原子性。</li>
<li><code>extension NSObject: ReactiveCompatible { }</code></li>
<li><code>@inline(never)</code> 永远不要把函数编译成内联形式</li>
<li><code>@inline(__always)</code> 与上面相反</li>
<li><strong>ContiguousArray</strong> 不和OC桥接的话，比使用Array更加有效率</li>
<li><strong>precondition(_ condition @escape)</strong></li>
<li><code>swift(&gt;=4.0)</code> 内置宏判断swift版本</li>
<li><strong>attribute</strong>((constructor)) main函数前执行某方法</li>
<li><code>.scpt</code>AppleScript是用在MacOSX上的脚本语言</li>
<li><code>insert_dylib</code>可以给App注入动态库。</li>
<li>[在OC中使用 class 属性修饰符] 就是给类添加静态成员，但是不会自动合成getter setter，这么做是为了与Swift桥接。（早他妈该有这个东西了）</li>
<li>NSURLCache</li>
<li>@discardableResult 忽略不使用方法返回值的警告</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SourceKitten获取语法树]]></title>
        <id>https://jinaiyuanbaojie.github.io//post/sourcekitten-huo-qu-yu-fa-shu</id>
        <link href="https://jinaiyuanbaojie.github.io//post/sourcekitten-huo-qu-yu-fa-shu">
        </link>
        <updated>2018-09-26T16:37:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="sourcekitten获取语法树">SourceKitten获取语法树</h1>
<blockquote>
<p>基于SourceKit的封装</p>
</blockquote>
<pre><code class="language-json">input: sourcekitten structure --text &quot;struct A { func b() {} }&quot;

output:
{
  &quot;key.diagnostic_stage&quot; : &quot;source.diagnostic.stage.swift.parse&quot;,
  &quot;key.length&quot; : 24,
  &quot;key.offset&quot; : 0,
  &quot;key.substructure&quot; : [
    {
      &quot;key.accessibility&quot; : &quot;source.lang.swift.accessibility.internal&quot;,
      &quot;key.bodylength&quot; : 13,
      &quot;key.bodyoffset&quot; : 10,
      &quot;key.kind&quot; : &quot;source.lang.swift.decl.struct&quot;,
      &quot;key.length&quot; : 24,
      &quot;key.name&quot; : &quot;A&quot;,
      &quot;key.namelength&quot; : 1,
      &quot;key.nameoffset&quot; : 7,
      &quot;key.offset&quot; : 0,
      &quot;key.substructure&quot; : [
        {
          &quot;key.accessibility&quot; : &quot;source.lang.swift.accessibility.internal&quot;,
          &quot;key.bodylength&quot; : 0,
          &quot;key.bodyoffset&quot; : 21,
          &quot;key.kind&quot; : &quot;source.lang.swift.decl.function.method.instance&quot;,
          &quot;key.length&quot; : 11,
          &quot;key.name&quot; : &quot;b()&quot;,
          &quot;key.namelength&quot; : 3,
          &quot;key.nameoffset&quot; : 16,
          &quot;key.offset&quot; : 11
        }
      ]
    }
  ]
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[flatMap]]></title>
        <id>https://jinaiyuanbaojie.github.io//post/flatmap</id>
        <link href="https://jinaiyuanbaojie.github.io//post/flatmap">
        </link>
        <updated>2018-08-20T16:39:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="flatmap">flatMap</h1>
<p>函数式编程中的<code>map</code> <code>reduce</code> <code>filter</code>算子很好理解。<br>
但是<code>flatMap</code>一直让我很困惑。<br>
今天阅读《Swift进阶》时，书中的例子让我恍然大悟。<br>
记录如下：
我想提取单个文本文件中的URL，有如下函数原型</p>
<pre><code class="language-swift">func extractLinks(from file: String) -&gt; [URL]
</code></pre>
<p>如果我有很多文本文件改如何处理呢？</p>
<pre><code class="language-swift">let fileArray: [String] = ...
let nestedLinks = fileArray.map(extractLinks)
</code></pre>
<p><strong>但是</strong>此时得到结果是嵌套数据</p>
<pre><code class="language-swift">[[&quot;http://&quot;,&quot;https://&quot;],[&quot;smb://&quot;]....,[&quot;ftp://&quot;]]
</code></pre>
<p>整合成为一个数组，</p>
<pre><code class="language-swift">let links = nestedLinks.joined()
</code></pre>
<p>下面轮到<strong>flatMap</strong>登场：</p>
<pre><code class="language-swift">fileArray.flatMap(extractLinks)
</code></pre>
<p>flatMap与上面的map+joined等价。</p>
<p><strong>完</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[温水煮青蛙]]></title>
        <id>https://jinaiyuanbaojie.github.io//post/wen-shui-zhu-qing-wa</id>
        <link href="https://jinaiyuanbaojie.github.io//post/wen-shui-zhu-qing-wa">
        </link>
        <updated>2018-08-15T16:23:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="我自己要注意的事项">我自己要注意的事项</h1>
<ul>
<li>不要被周围的慢节奏拖垮</li>
<li>不要慢慢适应不合理或者错误的做事方法</li>
<li>改变或推动不了周围环境，就做好自己</li>
<li>持续学习，从优化项目入手</li>
</ul>
<h1 id="hcc现在的问题">HCC现在的问题</h1>
<ul>
<li>无CI系统</li>
<li>服务端人员不够积极主动</li>
<li>业务部门随时骚扰</li>
<li>需求会议太多</li>
<li>测试账号不完备</li>
<li>无预上线流程</li>
<li>权限管理混乱</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RxSwift散乱整理]]></title>
        <id>https://jinaiyuanbaojie.github.io//post/rxswift-san-luan-zheng-li</id>
        <link href="https://jinaiyuanbaojie.github.io//post/rxswift-san-luan-zheng-li">
        </link>
        <updated>2018-07-12T16:43:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="rxswift散乱整理">RxSwift散乱整理</h3>
<hr>
<h4 id="1rxswift是什么">1.RxSwift是什么</h4>
<p><strong>RxSwift</strong>是应用于Swift语言的响应式编程框架。遵从<code>Rx</code>社区的响应式协议。</p>
<h4 id="2rxswift可以解决什么问题">2.RxSwift可以解决什么问题</h4>
<ul>
<li>整合苹果官方的异步编程API（NotificationCenter Delegate GCD Closure）</li>
<li>简化异步编程</li>
<li>利用函数式编程和响应式编程，解决命令式编程的固有问题</li>
</ul>
<h4 id="3rxswift的好处">3.RxSwift的好处</h4>
<blockquote>
<p>响应式编程提高了代码的抽象层级，所以你可以只关注定义了业务逻辑的那些相互依赖的事件，而非纠缠于大量的实现细节。RP 的代码往往会更加简明。</p>
</blockquote>
<h4 id="0待整理的杂项">0.待整理的杂项</h4>
<blockquote>
<p>在学习过程中最困难的一部分是 以响应式编程的方式思考</p>
</blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/27678951">响应式编程（Reactive Programming）介绍</a></p>
<blockquote>
<p>The three building blocks of Rx code are <strong>observables</strong>, <strong>operators</strong>, and <strong>schedulers</strong>.</p>
</blockquote>
<p><strong>Observable<T></strong> 可以发送三种事件：<code>next</code>、<code>complete</code>、<code>error</code>。<br>
Sequences分为有限序列和无限序列。<br>
Subjects act as both an observable and an observer.<br>
Stream Sequence Signal Observable....<br>
Observer,subscribe,next,complete,error.Sheduler.Subject,</p>
<p>==下面的类或者协议还有各种扩展==</p>
<h3 id="observable">Observable</h3>
<pre><code>public class Observable&lt;Element&gt; : ObservableType {
    /// ObservableType是protocol，实现类需要指定E的具体类型
    public typealias E = Element
    
    //ObserverType和ObservableType指定的E需要一致
    public func subscribe&lt;O: ObserverType&gt;(_ observer: O) -&gt; Disposable where O.E == E {
        rxAbstractMethod()
    }
    
    public func asObservable() -&gt; Observable&lt;E&gt; {
        return self
    }
}
</code></pre>
<h3 id="observableconvertibletype">ObservableConvertibleType</h3>
<pre><code>public protocol ObservableConvertibleType {
    /// Type of elements in sequence.
    associatedtype E

    /// Converts `self` to `Observable` sequence.
    ///
    /// - returns: Observable sequence that represents `self`.
    func asObservable() -&gt; Observable&lt;E&gt;
}
</code></pre>
<h3 id="observabletypeobservableconvertibletype">ObservableType:ObservableConvertibleType</h3>
<pre><code>public protocol ObservableType : ObservableConvertibleType {
    func subscribe&lt;O: ObserverType&gt;(_ observer: O) -&gt; Disposable where O.E == E
}
</code></pre>
<h3 id="observertype">ObserverType</h3>
<pre><code>public protocol ObserverType {
    /// The type of elements in sequence that observer can observe.
    associatedtype E

    /// Notify observer about sequence event.
    ///
    /// - parameter event: Event that occurred.
    func on(_ event: Event&lt;E&gt;)
}
</code></pre>
<h3 id="event">Event</h3>
<pre><code>public enum Event&lt;Element&gt; {
    /// Next element is produced.
    case next(Element)

    /// Sequence terminated with an error.
    case error(Swift.Error)

    /// Sequence completed successfully.
    case completed
}
</code></pre>
<h3 id="disposable">Disposable</h3>
<pre><code>/// Respresents a disposable resource.
public protocol Disposable {
    /// Dispose resource.
    func dispose()
}
</code></pre>
<h3 id="producerobservale">Producer:Observale</h3>
<h3 id="目录结构">目录结构</h3>
<pre><code>.
├── AnyObserver.swift
├── Cancelable.swift
├── Concurrency
│   ├── AsyncLock.swift
│   ├── Lock.swift
│   ├── LockOwnerType.swift
│   ├── SynchronizedDisposeType.swift
│   ├── SynchronizedOnType.swift
│   └── SynchronizedUnsubscribeType.swift
├── ConnectableObservableType.swift
├── Deprecated.swift
├── Disposable.swift
├── Disposables
│   ├── AnonymousDisposable.swift
│   ├── BinaryDisposable.swift
│   ├── BooleanDisposable.swift
│   ├── CompositeDisposable.swift
│   ├── Disposables.swift
│   ├── DisposeBag.swift
│   ├── DisposeBase.swift
│   ├── NopDisposable.swift
│   ├── RefCountDisposable.swift
│   ├── ScheduledDisposable.swift
│   ├── SerialDisposable.swift
│   ├── SingleAssignmentDisposable.swift
│   └── SubscriptionDisposable.swift
├── Errors.swift
├── Event.swift
├── Extensions
│   ├── Bag+Rx.swift
│   └── String+Rx.swift
├── GroupedObservable.swift
├── ImmediateSchedulerType.swift
├── Info.plist
├── Observable.swift
├── ObservableConvertibleType.swift
├── ObservableType+Extensions.swift
├── ObservableType.swift
├── Observables
│   ├── AddRef.swift
│   ├── Amb.swift
│   ├── AsMaybe.swift
│   ├── AsSingle.swift
│   ├── Buffer.swift
│   ├── Catch.swift
│   ├── CombineLatest+Collection.swift
│   ├── CombineLatest+arity.swift
│   ├── CombineLatest+arity.tt
│   ├── CombineLatest.swift
│   ├── Concat.swift
│   ├── Create.swift
│   ├── Debounce.swift
│   ├── Debug.swift
│   ├── DefaultIfEmpty.swift
│   ├── Deferred.swift
│   ├── Delay.swift
│   ├── DelaySubscription.swift
│   ├── Dematerialize.swift
│   ├── DistinctUntilChanged.swift
│   ├── Do.swift
│   ├── ElementAt.swift
│   ├── Empty.swift
│   ├── Enumerated.swift
│   ├── Error.swift
│   ├── Filter.swift
│   ├── First.swift
│   ├── Generate.swift
│   ├── GroupBy.swift
│   ├── Just.swift
│   ├── Map.swift
│   ├── Materialize.swift
│   ├── Merge.swift
│   ├── Multicast.swift
│   ├── Never.swift
│   ├── ObserveOn.swift
│   ├── Optional.swift
│   ├── Producer.swift
│   ├── Range.swift
│   ├── Reduce.swift
│   ├── Repeat.swift
│   ├── RetryWhen.swift
│   ├── Sample.swift
│   ├── Scan.swift
│   ├── Sequence.swift
│   ├── ShareReplayScope.swift
│   ├── SingleAsync.swift
│   ├── Sink.swift
│   ├── Skip.swift
│   ├── SkipUntil.swift
│   ├── SkipWhile.swift
│   ├── StartWith.swift
│   ├── SubscribeOn.swift
│   ├── Switch.swift
│   ├── SwitchIfEmpty.swift
│   ├── Take.swift
│   ├── TakeLast.swift
│   ├── TakeUntil.swift
│   ├── TakeWhile.swift
│   ├── Throttle.swift
│   ├── Timeout.swift
│   ├── Timer.swift
│   ├── ToArray.swift
│   ├── Using.swift
│   ├── Window.swift
│   ├── WithLatestFrom.swift
│   ├── Zip+Collection.swift
│   ├── Zip+arity.swift
│   ├── Zip+arity.tt
│   └── Zip.swift
├── ObserverType.swift
├── Observers
│   ├── AnonymousObserver.swift
│   ├── ObserverBase.swift
│   └── TailRecursiveSink.swift
├── Platform
│   ├── DataStructures
│   │   ├── Bag.swift -&gt; ../../../Platform/DataStructures/Bag.swift
│   │   ├── InfiniteSequence.swift -&gt; ../../../Platform/DataStructures/InfiniteSequence.swift
│   │   ├── PriorityQueue.swift -&gt; ../../../Platform/DataStructures/PriorityQueue.swift
│   │   └── Queue.swift -&gt; ../../../Platform/DataStructures/Queue.swift
│   ├── DeprecationWarner.swift -&gt; ../../Platform/DeprecationWarner.swift
│   ├── DispatchQueue+Extensions.swift -&gt; ../../Platform/DispatchQueue+Extensions.swift
│   ├── Platform.Darwin.swift -&gt; ../../Platform/Platform.Darwin.swift
│   ├── Platform.Linux.swift -&gt; ../../Platform/Platform.Linux.swift
│   └── RecursiveLock.swift -&gt; ../../Platform/RecursiveLock.swift
├── Reactive.swift
├── Rx.swift
├── RxMutableBox.swift
├── SchedulerType.swift
├── Schedulers
│   ├── ConcurrentDispatchQueueScheduler.swift
│   ├── ConcurrentMainScheduler.swift
│   ├── CurrentThreadScheduler.swift
│   ├── HistoricalScheduler.swift
│   ├── HistoricalSchedulerTimeConverter.swift
│   ├── Internal
│   │   ├── DispatchQueueConfiguration.swift
│   │   ├── InvocableScheduledItem.swift
│   │   ├── InvocableType.swift
│   │   ├── ScheduledItem.swift
│   │   └── ScheduledItemType.swift
│   ├── MainScheduler.swift
│   ├── OperationQueueScheduler.swift
│   ├── RecursiveScheduler.swift
│   ├── SchedulerServices+Emulation.swift
│   ├── SerialDispatchQueueScheduler.swift
│   ├── VirtualTimeConverterType.swift
│   └── VirtualTimeScheduler.swift
├── Subjects
│   ├── AsyncSubject.swift
│   ├── BehaviorSubject.swift
│   ├── PublishSubject.swift
│   ├── ReplaySubject.swift
│   └── SubjectType.swift
├── SwiftSupport
│   └── SwiftSupport.swift
└── Traits
    ├── Completable+AndThen.swift
    ├── Completable.swift
    ├── Maybe.swift
    ├── ObservableType+PrimitiveSequence.swift
    ├── PrimitiveSequence+Zip+arity.swift
    ├── PrimitiveSequence+Zip+arity.tt
    ├── PrimitiveSequence.swift
    └── Single.swift
</code></pre>
<h3 id="tips">TIPS</h3>
<ul>
<li>.tt文件 生成代码的模版文件 T4(Text Template Transformation Toolkit)</li>
<li><code>OSAtomicCompareAndSwap32Barrier(_oldValue _newValue _theValue)-&gt;Bool</code> 如果_oldValue == _theValue，那么设置_newValue并返回true。保证操作的原子性。</li>
<li><code>extension NSObject: ReactiveCompatible { }</code></li>
<li><code>@inline(never)</code> 永远不要把函数编译成内联形式</li>
<li><code>@inline(__always)</code> 与上面相反</li>
<li><strong>ContiguousArray</strong> 不和OC桥接的话，比使用Array更加有效率</li>
<li><strong>precondition(_ condition @escape)</strong></li>
<li><code>swift(&gt;=4.0)</code> 内置宏判断swift版本</li>
<li><strong>attribute</strong>((constructor)) main函数前执行某方法</li>
<li><code>.scpt</code>AppleScript是用在MacOSX上的脚本语言</li>
<li><code>insert_dylib</code>可以给App注入动态库。</li>
<li>[在OC中使用 class 属性修饰符] 就是给类添加静态成员，但是不会自动合成getter setter，这么做是为了与Swift桥接。（早他妈该有这个东西了）</li>
<li>NSURLCache</li>
</ul>
<h3 id="observeon-vs-subscribeon">ObserveOn VS SubscribeOn</h3>
<ul>
<li>SubscribeOn<br>
指定 <code>let subscription = Observable.subscribe(self)</code> 语句的执行线程。</li>
<li>ObserveOn<br>
指定<code>Observer.on(event)</code>方法的执行线程</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android HotFix]]></title>
        <id>https://jinaiyuanbaojie.github.io//post/android-hotfix</id>
        <link href="https://jinaiyuanbaojie.github.io//post/android-hotfix">
        </link>
        <updated>2018-07-12T16:24:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="热修复流派">热修复流派</h1>
<ul>
<li>Native: 利用JNI改变调用方法的入口</li>
<li>Java：多dex打包，补丁dex插入前面
<ul>
<li>Qzone: 差量dex</li>
<li>Tinker: 全量dex(dexdiff算法本地合成)</li>
</ul>
</li>
</ul>
<h1 id="classloader">ClassLoader</h1>
<ul>
<li>加载Java代码到虚拟机</li>
<li>双亲委派模式找出Java类：先托管给父类查找，如果父类查找不到再自己查找，如此递归。</li>
<li>Android平台下提供特定的<code>DexClassLoader</code>,会按顺序在dex数组中查找类，如果找到会忽略后面的相同类。</li>
</ul>
<h1 id="android编译方式">Android编译方式</h1>
<ul>
<li>JIT 及时编译：安装快，运行时速度会变慢</li>
<li>AOT Ahead of time：安装包变大，安装时间变长，运行速度变快</li>
<li>混合编译：上述方式的综合</li>
</ul>
<h1 id="android虚拟机发展">Android虚拟机发展</h1>
<ul>
<li>Dalvik：～Android4.0</li>
<li>ART： Android5.0～</li>
<li>ART beta: Android4.0</li>
<li>ART: Android Run Time代替Dalvik的新虚拟机</li>
</ul>
<h1 id="编译方式与版本对应关系">编译方式与版本对应关系</h1>
<ul>
<li>JIT：Dalvik虚拟机 ～Android4.0</li>
<li>AOT：ART虚拟机 Android5.0～Android6.0</li>
<li>混合编译：Android7.0～</li>
</ul>
<h1 id="插桩class_ispreverifed">插桩CLASS_ISPREVERIFED</h1>
<ul>
<li>优化dex -&gt; odex,为了提升加载速度</li>
<li>满足条件的类会被打桩<code>CLASS_ISPREVERIFED</code>标记，不再引入其他dex文件的代码</li>
<li>被打桩的类引用热修复的类时会报错</li>
<li>打桩是为了优化Java代码的装载速度，当A类被标记，引用的B类不在原理的dex文件而在补丁dex文件中时，会报错</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gradle!]]></title>
        <id>https://jinaiyuanbaojie.github.io//post/hello-gradle</id>
        <link href="https://jinaiyuanbaojie.github.io//post/hello-gradle">
        </link>
        <updated>2018-07-04T16:28:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="gradle">Gradle</h1>
<ul>
<li>Java的打包工具：Server或Android都可以</li>
<li>基于Groovy语言，Groovy语言运行在JVM上，会编译为class文件，所以可以与Java兼容。</li>
<li>可以管理Android各模块依赖关系</li>
</ul>
<h1 id="android工程结构">Android工程结构</h1>
<ul>
<li>setting.gradle 配置那些module参与编译构建</li>
</ul>
<pre><code>include ':MyApp', //main module
        ':subMoudle',
        ':Base:Utils1', //文件夹Base下的module Utils1
        ':Base:Utils2'
</code></pre>
<ul>
<li>顶层build.gradle 各个module共享</li>
</ul>
<pre><code>//构建脚本（groovy语言）依赖的第三放插件和插件的代码仓库
buildscript {
    repositories {
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
    }
}

//Android项目（Java语言）依赖的第三放插件和插件的代码仓库
allprojects {
    repositories {
        google()
    }
}
</code></pre>
<ul>
<li>app下build.gradle 具体模块的构建指令</li>
</ul>
<pre><code>//编译MainModule所依赖的子模块以及jar包的检索路径
dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api project(':subModule1')
    api project(':subModule2')
}
</code></pre>
<h1 id="自定义groovy插件">自定义groovy插件</h1>
<ul>
<li>
<p>直接在build.gradle中写逻辑：快速验证功能，复用性差</p>
</li>
<li>
<p>作为groovy lib被build.gradle引用</p>
<ul>
<li>新建Android Module/Android Library</li>
<li>除build.gradle文件外的其余文件全都删除</li>
<li>新建文件夹<code>src/main/groovy</code>目录</li>
<li>配置<code>build.gradle</code></li>
</ul>
<pre><code>apply plugin: 'groovy' //必选
apply plugin: 'maven'
dependencies {
   //依赖的jar包或者gradle插件
}
</code></pre>
<ul>
<li>新建resources/META-INF/gradle-plugins/<code>plugin.properties</code></li>
<li>在文件中配置自定义插件的入口</li>
</ul>
<p><code>implementation-class=mypackage.MyPlugin</code></p>
<ul>
<li>实现<code>MyPlugin</code></li>
</ul>
<pre><code>class MyPlugin implements Plugin&lt;Project&gt; {
    void apply(Project project) {
        //自定义Task也可以引用其他groovy类的方法
        project.task('myTask') &lt;&lt; {
            println &quot;Hello world&quot;
        }
    }
}
</code></pre>
<ul>
<li>命令行或者IDE右侧Task列表执行：gradlew myTask</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript中的继承]]></title>
        <id>https://jinaiyuanbaojie.github.io//post/javascript-zhong-de-ji-cheng</id>
        <link href="https://jinaiyuanbaojie.github.io//post/javascript-zhong-de-ji-cheng">
        </link>
        <updated>2018-06-27T16:16:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="开始之前">开始之前</h2>
<ul>
<li><code>JavaScript</code>使用场景
<ul>
<li>Web前端</li>
<li>服务器</li>
<li>PC跨平台应用</li>
<li>移动端：<code>React Native</code> <code>Weex</code> <code>微信小程序</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>Jeff Atwood: Any application that can be written in JavaScript, will eventually be written in JavaScript.</p>
</blockquote>
<ul>
<li><code>JavaScript</code>的世界一切都是对象,函数也是对象!对象是<strong>一等公民</strong>！</li>
<li><code>JavaScript</code>是<strong>动态</strong>语言：可以方便的在运行时给对象添加或删除属性、方法</li>
</ul>
<blockquote>
<p>动态性比较：JavaScript &gt; Objective-C &gt; Java &gt; Swit &gt; C++</p>
</blockquote>
<ul>
<li>
<p><code>JavaScript</code><strong>多范式</strong>语言</p>
<ul>
<li>过程式</li>
<li>面向对象</li>
<li>函数式</li>
<li>响应式</li>
<li>....</li>
</ul>
</li>
<li>
<p><code>JavaScript</code>调试</p>
<ul>
<li>浏览器环境下运行：Chrome浏览器开发者工具</li>
<li>Node环境运行：https://nodejs.org/zh-cn/</li>
</ul>
</li>
<li>
<p><code>Hello world</code></p>
</li>
</ul>
<pre><code class="language-js">    var jsObject = {name:'Andrew'}
    
    console.log(jsObject) //{name: &quot;Andrew&quot;}
    console.log(jsObject.name) //Andrew
    console.log(typeof jsObject) //object
    console.log(jsObject.age) //undefined
    jsObject.age = 30
    console.log(jsObject.age) //30

    function foo(){
        return 'I am foo.'
    }
    
    jsObject.speak = foo
    jsObject.speak() //&quot;I am foo.&quot;
    delete jsObject.speak
    console.log(jsObject.speak) //undefined
    
    console.log(typeof foo) //function
    foo.customTag = 'HomeCredit';
    console.log(foo.customTag) //HomeCredit
    
    function foo2(){ 
        return 2018
    }
    foo.customFunc = foo2
    foo.customFunc() //2018
</code></pre>
<h2 id="继承">继承</h2>
<ul>
<li><code>JavaScript</code>基于原型继承的语言:
<ul>
<li><code>prototype</code>(<strong>原型</strong>):只有函数对象拥有此字段，创建一个函数就有一个对应的函数原型对象，<code>prototype</code>指向函数原型对象</li>
<li><code>__proto__</code>(<strong>原型链</strong>):任何对象都拥有<code>__proto__</code>这个字段，用来在运行时查找调用的<code>属性</code>、<code>方法</code>,<code>__proto__</code>也指向某个对象，以此构成查找链。</li>
<li>通过函数创建的对象的<code>__proto__</code>字段，自动指向函数的原型对象</li>
</ul>
<pre><code class="language-js">function Foo(){};
var foo = new Foo(); //只有函数才能使用new关键字
foo.__proto__ == Foo.prototype
</code></pre>
<blockquote>
<p>tips:<code>JavaScript</code>的世界一切都是对象</p>
</blockquote>
</li>
<li>代码</li>
</ul>
<pre><code class="language-js">function Base(){
    
}; //声明Base类，同时也是构造函数constructor，
console.log(Base) //ƒ Base(){}

console.log(Base.prototype)
/*
Base.prototype
    constructor:ƒ Base()
    __proto__:Object
*/
console.log(Base.__proto__) //ƒ () { [native code] }, Function.prototype
Base.__proto__ == Function.prototype //true

var base = new Base();
base.constructor //ƒ Base(){}
base.constructor == Base //true
base.__proto__ == Base.prototype //true

Object.prototype
/*
constructor:ƒ Object()
hasOwnProperty:ƒ hasOwnProperty()
isPrototypeOf:ƒ isPrototypeOf()
propertyIsEnumerable:ƒ propertyIsEnumerable()
toLocaleString:ƒ toLocaleString()
toString:ƒ toString()
valueOf:ƒ valueOf()
__defineGetter__:ƒ __defineGetter__()
__defineSetter__:ƒ __defineSetter__()
__lookupGetter__:ƒ __lookupGetter__()
__lookupSetter__:ƒ __lookupSetter__()
get __proto__:ƒ __proto__()
set __proto__:ƒ __proto__()
*/

Function.prototype // ƒ () { [native code] }
Object.__proto__ == Function.prototype //true
Function.prototype.__proto__ == Object.prototype //true
Base.__proto__ == Function.prototype //true

base.toString(); //&quot;[object Object]&quot; 

Base.prototype = {
    method1:function(){
        return &quot;Base method1&quot;;
    },
    
    method2:function(){
        return &quot;Base method2&quot;;
    }
};
base.method1(); //undefined
base.method2(); //undefined

var base_new = new Base();
base_new.method1(); //&quot;Base method1&quot;
base_new.method2(); //&quot;Base method2&quot;

function Derived(){}
Derived.prototype = {
    method1:function(){return &quot;Derived method1&quot;;},
    method3:function(){return &quot;Derived method3&quot;;}
}
Derived.prototype.__proto__ = Base.prototype;
var derived = new Derived();
derived.method1(); //&quot;Derived method1&quot;
derived.method2(); //&quot;Base method2&quot; 
derived.method3(); //&quot;Derived method3&quot;
</code></pre>
<ul>
<li>图例<br>
<img src="https://jinaiyuanbaojie.github.io//post-images/1559924380346.jpg" alt=""></li>
<li><code>ES6</code>
<ul>
<li>新一代的js版本</li>
<li>添加了各种语法和语法糖</li>
<li><a href="http://es6.ruanyifeng.com/#docs/class-extends">文档</a>：阮一峰教程</li>
<li><a href="https://babeljs.io/en/repl">Babel</a>: ES6代码转ES5</li>
</ul>
</li>
</ul>
<pre><code class="language-js">class Base {
  foo(){
    return &quot;i am base&quot;
  }
}

class Derived extends Base {
  foo(){
    return &quot;i am Derived&quot;
  }
}
</code></pre>
<p>转码后</p>
<pre><code class="language-js">&quot;use strict&quot;;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (&quot;value&quot; in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(&quot;this hasn't been initialised - super() hasn't been called&quot;); } return call &amp;&amp; (typeof call === &quot;object&quot; || typeof call === &quot;function&quot;) ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== &quot;function&quot; &amp;&amp; superClass !== null) { throw new TypeError(&quot;Super expression must either be null or a function, not &quot; + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(&quot;Cannot call a class as a function&quot;); } }

var Base = function () {
  function Base() {
    _classCallCheck(this, Base);
  }

  _createClass(Base, [{
    key: &quot;foo&quot;,
    value: function foo() {
      return &quot;i am base&quot;;
    }
  }]);

  return Base;
}();

var Derived = function (_Base) {
  _inherits(Derived, _Base);

  function Derived() {
    _classCallCheck(this, Derived);

    return _possibleConstructorReturn(this, (Derived.__proto__ || Object.getPrototypeOf(Derived)).apply(this, arguments));
  }

  _createClass(Derived, [{
    key: &quot;foo&quot;,
    value: function foo() {
      return &quot;i am Derived&quot;;
    }
  }]);

  return Derived;
}(Base);
</code></pre>
]]></content>
    </entry>
</feed>